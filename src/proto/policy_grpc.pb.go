// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: policy.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FirewallController_WriteClientPolicy_FullMethodName          = "/proto.FirewallController/WriteClientPolicy"
	FirewallController_RecordActivePolicies_FullMethodName       = "/proto.FirewallController/RecordActivePolicies"
	FirewallController_RecordActiveClientPolicies_FullMethodName = "/proto.FirewallController/RecordActiveClientPolicies"
	FirewallController_WriteStreamClientPolicies_FullMethodName  = "/proto.FirewallController/WriteStreamClientPolicies"
	FirewallController_RecordStreamPolicies_FullMethodName       = "/proto.FirewallController/RecordStreamPolicies"
	FirewallController_RecordStreamClientPolicies_FullMethodName = "/proto.FirewallController/RecordStreamClientPolicies"
)

// FirewallControllerClient is the client API for FirewallController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FirewallControllerClient interface {
	WriteClientPolicy(ctx context.Context, in *ClientPolicy, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RecordActivePolicies(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ClientPolicyList, error)
	RecordActiveClientPolicies(ctx context.Context, in *IpAddress, opts ...grpc.CallOption) (*ClientPolicyList, error)
	// Stream endpoints
	WriteStreamClientPolicies(ctx context.Context, opts ...grpc.CallOption) (FirewallController_WriteStreamClientPoliciesClient, error)
	RecordStreamPolicies(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (FirewallController_RecordStreamPoliciesClient, error)
	RecordStreamClientPolicies(ctx context.Context, in *IpAddress, opts ...grpc.CallOption) (FirewallController_RecordStreamClientPoliciesClient, error)
}

type firewallControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewFirewallControllerClient(cc grpc.ClientConnInterface) FirewallControllerClient {
	return &firewallControllerClient{cc}
}

func (c *firewallControllerClient) WriteClientPolicy(ctx context.Context, in *ClientPolicy, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FirewallController_WriteClientPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firewallControllerClient) RecordActivePolicies(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ClientPolicyList, error) {
	out := new(ClientPolicyList)
	err := c.cc.Invoke(ctx, FirewallController_RecordActivePolicies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firewallControllerClient) RecordActiveClientPolicies(ctx context.Context, in *IpAddress, opts ...grpc.CallOption) (*ClientPolicyList, error) {
	out := new(ClientPolicyList)
	err := c.cc.Invoke(ctx, FirewallController_RecordActiveClientPolicies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firewallControllerClient) WriteStreamClientPolicies(ctx context.Context, opts ...grpc.CallOption) (FirewallController_WriteStreamClientPoliciesClient, error) {
	stream, err := c.cc.NewStream(ctx, &FirewallController_ServiceDesc.Streams[0], FirewallController_WriteStreamClientPolicies_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &firewallControllerWriteStreamClientPoliciesClient{stream}
	return x, nil
}

type FirewallController_WriteStreamClientPoliciesClient interface {
	Send(*ClientPolicy) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type firewallControllerWriteStreamClientPoliciesClient struct {
	grpc.ClientStream
}

func (x *firewallControllerWriteStreamClientPoliciesClient) Send(m *ClientPolicy) error {
	return x.ClientStream.SendMsg(m)
}

func (x *firewallControllerWriteStreamClientPoliciesClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *firewallControllerClient) RecordStreamPolicies(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (FirewallController_RecordStreamPoliciesClient, error) {
	stream, err := c.cc.NewStream(ctx, &FirewallController_ServiceDesc.Streams[1], FirewallController_RecordStreamPolicies_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &firewallControllerRecordStreamPoliciesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FirewallController_RecordStreamPoliciesClient interface {
	Recv() (*ClientPolicy, error)
	grpc.ClientStream
}

type firewallControllerRecordStreamPoliciesClient struct {
	grpc.ClientStream
}

func (x *firewallControllerRecordStreamPoliciesClient) Recv() (*ClientPolicy, error) {
	m := new(ClientPolicy)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *firewallControllerClient) RecordStreamClientPolicies(ctx context.Context, in *IpAddress, opts ...grpc.CallOption) (FirewallController_RecordStreamClientPoliciesClient, error) {
	stream, err := c.cc.NewStream(ctx, &FirewallController_ServiceDesc.Streams[2], FirewallController_RecordStreamClientPolicies_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &firewallControllerRecordStreamClientPoliciesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FirewallController_RecordStreamClientPoliciesClient interface {
	Recv() (*ClientPolicy, error)
	grpc.ClientStream
}

type firewallControllerRecordStreamClientPoliciesClient struct {
	grpc.ClientStream
}

func (x *firewallControllerRecordStreamClientPoliciesClient) Recv() (*ClientPolicy, error) {
	m := new(ClientPolicy)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FirewallControllerServer is the server API for FirewallController service.
// All implementations must embed UnimplementedFirewallControllerServer
// for forward compatibility
type FirewallControllerServer interface {
	WriteClientPolicy(context.Context, *ClientPolicy) (*emptypb.Empty, error)
	RecordActivePolicies(context.Context, *emptypb.Empty) (*ClientPolicyList, error)
	RecordActiveClientPolicies(context.Context, *IpAddress) (*ClientPolicyList, error)
	// Stream endpoints
	WriteStreamClientPolicies(FirewallController_WriteStreamClientPoliciesServer) error
	RecordStreamPolicies(*emptypb.Empty, FirewallController_RecordStreamPoliciesServer) error
	RecordStreamClientPolicies(*IpAddress, FirewallController_RecordStreamClientPoliciesServer) error
	mustEmbedUnimplementedFirewallControllerServer()
}

// UnimplementedFirewallControllerServer must be embedded to have forward compatible implementations.
type UnimplementedFirewallControllerServer struct {
}

func (UnimplementedFirewallControllerServer) WriteClientPolicy(context.Context, *ClientPolicy) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteClientPolicy not implemented")
}
func (UnimplementedFirewallControllerServer) RecordActivePolicies(context.Context, *emptypb.Empty) (*ClientPolicyList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordActivePolicies not implemented")
}
func (UnimplementedFirewallControllerServer) RecordActiveClientPolicies(context.Context, *IpAddress) (*ClientPolicyList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordActiveClientPolicies not implemented")
}
func (UnimplementedFirewallControllerServer) WriteStreamClientPolicies(FirewallController_WriteStreamClientPoliciesServer) error {
	return status.Errorf(codes.Unimplemented, "method WriteStreamClientPolicies not implemented")
}
func (UnimplementedFirewallControllerServer) RecordStreamPolicies(*emptypb.Empty, FirewallController_RecordStreamPoliciesServer) error {
	return status.Errorf(codes.Unimplemented, "method RecordStreamPolicies not implemented")
}
func (UnimplementedFirewallControllerServer) RecordStreamClientPolicies(*IpAddress, FirewallController_RecordStreamClientPoliciesServer) error {
	return status.Errorf(codes.Unimplemented, "method RecordStreamClientPolicies not implemented")
}
func (UnimplementedFirewallControllerServer) mustEmbedUnimplementedFirewallControllerServer() {}

// UnsafeFirewallControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FirewallControllerServer will
// result in compilation errors.
type UnsafeFirewallControllerServer interface {
	mustEmbedUnimplementedFirewallControllerServer()
}

func RegisterFirewallControllerServer(s grpc.ServiceRegistrar, srv FirewallControllerServer) {
	s.RegisterService(&FirewallController_ServiceDesc, srv)
}

func _FirewallController_WriteClientPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirewallControllerServer).WriteClientPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FirewallController_WriteClientPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirewallControllerServer).WriteClientPolicy(ctx, req.(*ClientPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirewallController_RecordActivePolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirewallControllerServer).RecordActivePolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FirewallController_RecordActivePolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirewallControllerServer).RecordActivePolicies(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirewallController_RecordActiveClientPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirewallControllerServer).RecordActiveClientPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FirewallController_RecordActiveClientPolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirewallControllerServer).RecordActiveClientPolicies(ctx, req.(*IpAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirewallController_WriteStreamClientPolicies_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FirewallControllerServer).WriteStreamClientPolicies(&firewallControllerWriteStreamClientPoliciesServer{stream})
}

type FirewallController_WriteStreamClientPoliciesServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*ClientPolicy, error)
	grpc.ServerStream
}

type firewallControllerWriteStreamClientPoliciesServer struct {
	grpc.ServerStream
}

func (x *firewallControllerWriteStreamClientPoliciesServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *firewallControllerWriteStreamClientPoliciesServer) Recv() (*ClientPolicy, error) {
	m := new(ClientPolicy)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FirewallController_RecordStreamPolicies_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FirewallControllerServer).RecordStreamPolicies(m, &firewallControllerRecordStreamPoliciesServer{stream})
}

type FirewallController_RecordStreamPoliciesServer interface {
	Send(*ClientPolicy) error
	grpc.ServerStream
}

type firewallControllerRecordStreamPoliciesServer struct {
	grpc.ServerStream
}

func (x *firewallControllerRecordStreamPoliciesServer) Send(m *ClientPolicy) error {
	return x.ServerStream.SendMsg(m)
}

func _FirewallController_RecordStreamClientPolicies_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(IpAddress)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FirewallControllerServer).RecordStreamClientPolicies(m, &firewallControllerRecordStreamClientPoliciesServer{stream})
}

type FirewallController_RecordStreamClientPoliciesServer interface {
	Send(*ClientPolicy) error
	grpc.ServerStream
}

type firewallControllerRecordStreamClientPoliciesServer struct {
	grpc.ServerStream
}

func (x *firewallControllerRecordStreamClientPoliciesServer) Send(m *ClientPolicy) error {
	return x.ServerStream.SendMsg(m)
}

// FirewallController_ServiceDesc is the grpc.ServiceDesc for FirewallController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FirewallController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.FirewallController",
	HandlerType: (*FirewallControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteClientPolicy",
			Handler:    _FirewallController_WriteClientPolicy_Handler,
		},
		{
			MethodName: "RecordActivePolicies",
			Handler:    _FirewallController_RecordActivePolicies_Handler,
		},
		{
			MethodName: "RecordActiveClientPolicies",
			Handler:    _FirewallController_RecordActiveClientPolicies_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WriteStreamClientPolicies",
			Handler:       _FirewallController_WriteStreamClientPolicies_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "RecordStreamPolicies",
			Handler:       _FirewallController_RecordStreamPolicies_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RecordStreamClientPolicies",
			Handler:       _FirewallController_RecordStreamClientPolicies_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "policy.proto",
}
